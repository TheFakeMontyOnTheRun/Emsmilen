(module
 (type $0 (func (param i32) (result i32)))
 (type $1 (func))
 (type $2 (func (param i32 i32) (result i32)))
 (import "env" "memory" (memory $0 256 256))
 (global $global$0 (mut i32) (i32.const 5244416))
 (export "__wasm_call_ctors" (func $3))
 (export "main" (func $1))
 (export "stackAlloc" (func $0))
 (func $0 (; 0 ;) (type $0) (param $0 i32) (result i32)
  (global.set $global$0
   (local.tee $0
    (i32.and
     (i32.sub
      (global.get $global$0)
      (local.get $0)
     )
     (i32.const -16)
    )
   )
  )
  (local.get $0)
 )
 (func $1 (; 1 ;) (type $2) (param $0 i32) (param $1 i32) (result i32)
  (local $2 i32)
  (global.set $global$0
   (local.tee $2
    (i32.sub
     (global.get $global$0)
     (i32.const 16)
    )
   )
  )
  (i32.store offset=12
   (local.get $2)
   (i32.const 0)
  )
  (i32.store offset=8
   (local.get $2)
   (local.get $0)
  )
  (i32.store offset=4
   (local.get $2)
   (local.get $1)
  )
  (local.set $0
   (call $2
    (i32.load
     (i32.load offset=4
      (local.get $2)
     )
    )
   )
  )
  (global.set $global$0
   (i32.add
    (local.get $2)
    (i32.const 16)
   )
  )
  (local.get $0)
 )
 (func $2 (; 2 ;) (type $0) (param $0 i32) (result i32)
  (local $1 i32)
  (i32.store offset=12
   (local.tee $1
    (i32.sub
     (global.get $global$0)
     (i32.const 16)
    )
   )
   (local.get $0)
  )
  (i32.store offset=8
   (local.get $1)
   (i32.const 0)
  )
  (i32.store offset=4
   (local.get $1)
   (i32.const 0)
  )
  (i32.store
   (local.get $1)
   (i32.load offset=12
    (local.get $1)
   )
  )
  (loop $label$1
   (if
    (i32.load8_u
     (i32.load
      (local.get $1)
     )
    )
    (block
     (i32.store offset=4
      (local.get $1)
      (i32.add
       (i32.load offset=4
        (local.get $1)
       )
       (i32.const 1)
      )
     )
     (i32.store
      (local.get $1)
      (i32.add
       (i32.load
        (local.get $1)
       )
       (i32.const 1)
      )
     )
     (br $label$1)
    )
   )
  )
  (i32.load offset=4
   (local.get $1)
  )
 )
 (func $3 (; 3 ;) (type $1)
  (nop)
 )
)

